import React from "react";
import Head from "next/head";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { type NextPage } from "next";
import { useFieldArray, useForm } from "react-hook-form";
import { api } from "../../utils/api";
import { useRouter } from "next/router";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

const createQuestionValidator = z.object({
  question: z.string().min(5).max(600),
  options: z
    .array(z.object({ text: z.string().min(1).max(200) }))
    .min(2)
    .max(20),
});
type CreateQuestionInputType = z.infer<typeof createQuestionValidator>;

const CreateQuestion = () => {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
  } = useForm<CreateQuestionInputType>({
    resolver: zodResolver(createQuestionValidator),
    defaultValues: {
      options: [{ text: "yes" }, { text: "no" }],
    },
  });

  const { fields, append, prepend, remove, swap, move, insert } =
    useFieldArray<CreateQuestionInputType>({
      name: "options",
      control,
    });

  const { mutate, data, isLoading } = api.question.create.useMutation({
    onSuccess: async (data) => {
      await router.push(`/question/${data.id}`);
    },
  });

  if (isLoading || data) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <p className="text-white/40">loading</p>
      </div>
    );
  }
  return (
    <>
      <Head>
        <title>Polly</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="min-h-screen text-gray-100 antialiased">
          <header>
            <Link href="/">
              <h1 className="fond-bold cursor-pointer text-4xl">Polly</h1>
            </Link>
          </header>
          <div className="text-2xl text-white">
            <h2>create a poll</h2>
            <form
              onSubmit={() =>
                handleSubmit((data) => {
                  mutate(data);
                })
              }
              className="w-full"
            >
              <label className="label">
                <span className="label-text text-base font-semibold">
                  Enter Question
                </span>
              </label>
              <input
                {...register("question")}
                type="text"
                className="block w-full rounded-md border text-gray-400"
                placeholder="is joseph a dooby?"
              />
              {errors.question && (
                <p className="text-red-400">{errors.question.message}</p>
              )}
              <div>
                {fields.map((field, index) => {
                  return (
                    <div key={field.id}>
                      <section key={field.id}>
                        <input
                          className="w-full font-medium text-gray-300"
                          placeholder="name"
                          {...register(`options.${index}.text`, {
                            required: true,
                          })}
                        />
                        <button
                          type="button"
                          onClick={() => remove(index)}
                          className="text-red-500"
                        >
                          -
                        </button>
                      </section>
                    </div>
                  );
                })}
              </div>
            </form>
            form
          </div>
        </div>
      </main>
    </>
  );
};

const Create: NextPage = () => {
  return <CreateQuestion />;
};

export default Create;
