import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const { data: sessionData } = useSession();
  const {data:questions } = api.question.getAll.useQuery(
    undefined,
    {enabled: sessionData?.user !== undefined}
  )
  return (
    <>
      <Head>
        <title>Polly</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            {/* Create <span className="text-[hsl(280,100%,70%)]">T3</span> App */}
            Polly
          </h1>
          <div className="flex flex-col items-center gap-2">
            {sessionData && <AuthCompontent />}
            {sessionData && questions && questions.map( question => {
              return (
                <Link
                  key={question.id}
                  className="text-white text-2xl"
                  href={`/question/${question.id}`}>
                  {question.question} 
                </Link>
              )
            })}
            <div className="flex flex-col items-center justify-center gap-4">
              <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
              >
                {sessionData ? "Sign out" : "Sign in"}
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthCompontent: React.FC = () => {
  const utils = api.useContext();
  const mutation = api.question.addQuestion.useMutation({
    onSettled: async () => {
      await utils.question.getAll.invalidate();
    }
  });
  
  return (
    <div>
    <label className="text-white text-2xl mx-1" htmlFor="">Question:</label>
    <input
      onKeyDown={(event) => {
        if (event.key === "Enter") {
          mutation.mutate({question: event.currentTarget.value});
          event.currentTarget.value = "";
        }
      }}
      ></input>
      </div>
  );
};

